name: DNS Failover Monitor - denisthiessen.de

on:
  schedule:
    - cron: '*/15 * * * *'  # every 15 minutes
  workflow_dispatch:

jobs:
  dns-failover:
    runs-on: ubuntu-latest
    steps:
      - name: DNS failover logic
        run: |
          DOMAIN="denisthiessen.de"
          MAIN_IP="49.12.221.103"
          BACKUP_IP="212.227.103.11"
          ZONE_ID="${{ secrets.CF_ZONE_ID }}"
          RECORD_ID="${{ secrets.CF_RECORD_ID }}"
          API_TOKEN="${{ secrets.CF_API_TOKEN }}"

          # Custom health check path
          HEALTH_PATH="/health"

          check_up() {
            local IP="$1"
            local DOMAIN="$2"
            local SCHEME="https"

            echo "Testing $DOMAIN on $IP..."

            STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              --resolve "$DOMAIN:443:$IP" \
              "$SCHEME://$DOMAIN$HEALTH_PATH")

            if [[ "$STATUS" =~ ^2|3 ]]; then
              echo "Server at $IP is UP (status $STATUS)"
              return 0
            else
              echo "Server at $IP is DOWN (status $STATUS)"
              return 1
            fi
          }

          echo "Checking MAIN server..."
          if check_up "$MAIN_IP" "$DOMAIN"; then
            TARGET_IP="$MAIN_IP"
          else
            echo "Main is down. Checking BACKUP..."
            if check_up "$BACKUP_IP" "$DOMAIN"; then
              TARGET_IP="$BACKUP_IP"
            else
              echo "Both servers are down or unhealthy. Aborting DNS update."
              exit 0
            fi
          fi

          echo "Getting current DNS record..."
          CURRENT_IP=$(dig +short "$DOMAIN" @1.1.1.1)

          echo "Current IP: $CURRENT_IP"
          echo "Target IP: $TARGET_IP"

          if [[ "$CURRENT_IP" != "$TARGET_IP" ]]; then
            echo "Updating DNS to point to $TARGET_IP"
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
              -H "Authorization: Bearer $API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "'"$DOMAIN"'",
                "content": "'"$TARGET_IP"'",
                "ttl": 120,
                "proxied": false
              }'
          else
            echo "DNS already points to the correct IP. No update needed."
          fi
